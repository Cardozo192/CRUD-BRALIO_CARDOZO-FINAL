// Generated by Dagger (https://dagger.dev).
package dev.cardoso.quotesmvvm;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import dev.cardoso.quotesmvvm.data.QuoteLocalDataSourceImpl;
import dev.cardoso.quotesmvvm.data.QuoteRemoteDataSourceImpl;
import dev.cardoso.quotesmvvm.data.QuoteRepositoryImpl;
import dev.cardoso.quotesmvvm.data.UserRemoteDataSourceImpl;
import dev.cardoso.quotesmvvm.data.UserRepositoryImpl;
import dev.cardoso.quotesmvvm.data.local.QuoteDB;
import dev.cardoso.quotesmvvm.data.local.daos.QuoteDAO;
import dev.cardoso.quotesmvvm.data.remote.QuoteApi;
import dev.cardoso.quotesmvvm.data.remote.UserApi;
import dev.cardoso.quotesmvvm.di.DataBaseModule;
import dev.cardoso.quotesmvvm.di.DataBaseModule_ProvideQuoteDAOFactory;
import dev.cardoso.quotesmvvm.di.DataBaseModule_ProvideQuoteDBFactory;
import dev.cardoso.quotesmvvm.di.NetworkModule;
import dev.cardoso.quotesmvvm.di.NetworkModule_ProvideQuoteApiFactory;
import dev.cardoso.quotesmvvm.di.NetworkModule_ProvideRetrofitFactory;
import dev.cardoso.quotesmvvm.di.NetworkModule_ProvideUserApiFactory;
import dev.cardoso.quotesmvvm.domain.usecase.AddQuoteUseCase;
import dev.cardoso.quotesmvvm.domain.usecase.DeleteQuoteUseCase;
import dev.cardoso.quotesmvvm.domain.usecase.EditQuoteUseCase;
import dev.cardoso.quotesmvvm.domain.usecase.GetQuoteRandomUseCase;
import dev.cardoso.quotesmvvm.domain.usecase.GetQuotesUseCase;
import dev.cardoso.quotesmvvm.domain.usecase.UserUseCase;
import dev.cardoso.quotesmvvm.presentation.view.AddQuoteFragment;
import dev.cardoso.quotesmvvm.presentation.view.EditQuoteFragment;
import dev.cardoso.quotesmvvm.presentation.view.LoginActivity;
import dev.cardoso.quotesmvvm.presentation.view.LoginFragment;
import dev.cardoso.quotesmvvm.presentation.view.MainActivity;
import dev.cardoso.quotesmvvm.presentation.viewmodel.AddQuoteViewModel;
import dev.cardoso.quotesmvvm.presentation.viewmodel.AddQuoteViewModel_HiltModules_KeyModule_ProvideFactory;
import dev.cardoso.quotesmvvm.presentation.viewmodel.EditQuoteViewModel;
import dev.cardoso.quotesmvvm.presentation.viewmodel.EditQuoteViewModel_HiltModules_KeyModule_ProvideFactory;
import dev.cardoso.quotesmvvm.presentation.viewmodel.QuoteListViewModel;
import dev.cardoso.quotesmvvm.presentation.viewmodel.QuoteListViewModel_HiltModules_KeyModule_ProvideFactory;
import dev.cardoso.quotesmvvm.presentation.viewmodel.QuoteViewModel;
import dev.cardoso.quotesmvvm.presentation.viewmodel.QuoteViewModel_HiltModules_KeyModule_ProvideFactory;
import dev.cardoso.quotesmvvm.presentation.viewmodel.UserViewModel;
import dev.cardoso.quotesmvvm.presentation.viewmodel.UserViewModel_HiltModules_KeyModule_ProvideFactory;
import dev.cardoso.quotesmvvm.ui.home.HomeFragment;
import dev.cardoso.quotesmvvm.ui.home.HomeViewModel;
import dev.cardoso.quotesmvvm.ui.home.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerInitApp_HiltComponents_SingletonC extends InitApp_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DataBaseModule dataBaseModule;

  private final DaggerInitApp_HiltComponents_SingletonC singletonC = this;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<QuoteApi> provideQuoteApiProvider;

  private Provider<UserApi> provideUserApiProvider;

  private DaggerInitApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam, DataBaseModule dataBaseModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.dataBaseModule = dataBaseModuleParam;
    initialize(applicationContextModuleParam, dataBaseModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private QuoteDB quoteDB() {
    return DataBaseModule_ProvideQuoteDBFactory.provideQuoteDB(dataBaseModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private QuoteDAO quoteDAO() {
    return DataBaseModule_ProvideQuoteDAOFactory.provideQuoteDAO(dataBaseModule, quoteDB());
  }

  private QuoteLocalDataSourceImpl quoteLocalDataSourceImpl() {
    return new QuoteLocalDataSourceImpl(quoteDAO());
  }

  private QuoteRemoteDataSourceImpl quoteRemoteDataSourceImpl() {
    return new QuoteRemoteDataSourceImpl(provideQuoteApiProvider.get());
  }

  private QuoteRepositoryImpl quoteRepositoryImpl() {
    return new QuoteRepositoryImpl(quoteDAO(), quoteLocalDataSourceImpl(), quoteRemoteDataSourceImpl());
  }

  private UserRemoteDataSourceImpl userRemoteDataSourceImpl() {
    return new UserRemoteDataSourceImpl(provideUserApiProvider.get());
  }

  private UserRepositoryImpl userRepositoryImpl() {
    return new UserRepositoryImpl(userRemoteDataSourceImpl());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam,
      final DataBaseModule dataBaseModuleParam) {
    this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonC, 1));
    this.provideQuoteApiProvider = DoubleCheck.provider(new SwitchingProvider<QuoteApi>(singletonC, 0));
    this.provideUserApiProvider = DoubleCheck.provider(new SwitchingProvider<UserApi>(singletonC, 2));
  }

  @Override
  public Set<Boolean> getDisableFragmentGetContextFix() {
    return Collections.<Boolean>emptySet();
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  @Override
  public void injectInitApp(InitApp initApp) {
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private DataBaseModule dataBaseModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder dataBaseModule(DataBaseModule dataBaseModule) {
      this.dataBaseModule = Preconditions.checkNotNull(dataBaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    public InitApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (dataBaseModule == null) {
        this.dataBaseModule = new DataBaseModule();
      }
      return new DaggerInitApp_HiltComponents_SingletonC(applicationContextModule, dataBaseModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements InitApp_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerInitApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public InitApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements InitApp_HiltComponents.ActivityC.Builder {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerInitApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public InitApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements InitApp_HiltComponents.FragmentC.Builder {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerInitApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public InitApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements InitApp_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerInitApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public InitApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements InitApp_HiltComponents.ViewC.Builder {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerInitApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public InitApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements InitApp_HiltComponents.ViewModelC.Builder {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerInitApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public InitApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements InitApp_HiltComponents.ServiceC.Builder {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerInitApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public InitApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends InitApp_HiltComponents.ViewWithFragmentC {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerInitApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends InitApp_HiltComponents.FragmentC {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerInitApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @Override
    public void injectAddQuoteFragment(AddQuoteFragment addQuoteFragment) {
    }

    @Override
    public void injectEditQuoteFragment(EditQuoteFragment editQuoteFragment) {
    }

    @Override
    public void injectLoginFragment(LoginFragment loginFragment) {
    }

    @Override
    public void injectHomeFragment(HomeFragment homeFragment) {
    }
  }

  private static final class ViewCImpl extends InitApp_HiltComponents.ViewC {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerInitApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends InitApp_HiltComponents.ActivityC {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerInitApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(6).add(AddQuoteViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(EditQuoteViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(QuoteListViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(QuoteViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(UserViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectNavigationDrawerActivity(NavigationDrawerActivity navigationDrawerActivity) {
    }

    @Override
    public void injectLoginActivity(LoginActivity loginActivity) {
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }
  }

  private static final class ViewModelCImpl extends InitApp_HiltComponents.ViewModelC {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AddQuoteViewModel> addQuoteViewModelProvider;

    private Provider<EditQuoteViewModel> editQuoteViewModelProvider;

    private Provider<HomeViewModel> homeViewModelProvider;

    private Provider<QuoteListViewModel> quoteListViewModelProvider;

    private Provider<QuoteViewModel> quoteViewModelProvider;

    private Provider<UserViewModel> userViewModelProvider;

    private ViewModelCImpl(DaggerInitApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private AddQuoteUseCase addQuoteUseCase() {
      return new AddQuoteUseCase(singletonC.quoteRepositoryImpl());
    }

    private EditQuoteUseCase editQuoteUseCase() {
      return new EditQuoteUseCase(singletonC.quoteDAO(), singletonC.quoteRepositoryImpl());
    }

    private GetQuotesUseCase getQuotesUseCase() {
      return new GetQuotesUseCase(singletonC.quoteDAO(), singletonC.quoteRepositoryImpl());
    }

    private DeleteQuoteUseCase deleteQuoteUseCase() {
      return new DeleteQuoteUseCase(singletonC.quoteRepositoryImpl());
    }

    private GetQuoteRandomUseCase getQuoteRandomUseCase() {
      return new GetQuoteRandomUseCase(singletonC.quoteDAO(), singletonC.quoteRepositoryImpl());
    }

    private UserUseCase userUseCase() {
      return new UserUseCase(singletonC.userRepositoryImpl());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.addQuoteViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.editQuoteViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.homeViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.quoteListViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
      this.quoteViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
      this.userViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(6).put("dev.cardoso.quotesmvvm.presentation.viewmodel.AddQuoteViewModel", ((Provider) addQuoteViewModelProvider)).put("dev.cardoso.quotesmvvm.presentation.viewmodel.EditQuoteViewModel", ((Provider) editQuoteViewModelProvider)).put("dev.cardoso.quotesmvvm.ui.home.HomeViewModel", ((Provider) homeViewModelProvider)).put("dev.cardoso.quotesmvvm.presentation.viewmodel.QuoteListViewModel", ((Provider) quoteListViewModelProvider)).put("dev.cardoso.quotesmvvm.presentation.viewmodel.QuoteViewModel", ((Provider) quoteViewModelProvider)).put("dev.cardoso.quotesmvvm.presentation.viewmodel.UserViewModel", ((Provider) userViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerInitApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerInitApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dev.cardoso.quotesmvvm.presentation.viewmodel.AddQuoteViewModel 
          return (T) new AddQuoteViewModel(viewModelCImpl.addQuoteUseCase());

          case 1: // dev.cardoso.quotesmvvm.presentation.viewmodel.EditQuoteViewModel 
          return (T) new EditQuoteViewModel(viewModelCImpl.editQuoteUseCase());

          case 2: // dev.cardoso.quotesmvvm.ui.home.HomeViewModel 
          return (T) new HomeViewModel(viewModelCImpl.getQuotesUseCase(), viewModelCImpl.deleteQuoteUseCase());

          case 3: // dev.cardoso.quotesmvvm.presentation.viewmodel.QuoteListViewModel 
          return (T) new QuoteListViewModel(viewModelCImpl.getQuotesUseCase(), viewModelCImpl.deleteQuoteUseCase());

          case 4: // dev.cardoso.quotesmvvm.presentation.viewmodel.QuoteViewModel 
          return (T) new QuoteViewModel(viewModelCImpl.getQuotesUseCase(), viewModelCImpl.getQuoteRandomUseCase(), singletonC.quoteDB());

          case 5: // dev.cardoso.quotesmvvm.presentation.viewmodel.UserViewModel 
          return (T) new UserViewModel(viewModelCImpl.userUseCase());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends InitApp_HiltComponents.ActivityRetainedC {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerInitApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerInitApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerInitApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends InitApp_HiltComponents.ServiceC {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerInitApp_HiltComponents_SingletonC singletonC, Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerInitApp_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerInitApp_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // dev.cardoso.quotesmvvm.data.remote.QuoteApi 
        return (T) NetworkModule_ProvideQuoteApiFactory.provideQuoteApi(singletonC.provideRetrofitProvider.get());

        case 1: // retrofit2.Retrofit 
        return (T) NetworkModule_ProvideRetrofitFactory.provideRetrofit();

        case 2: // dev.cardoso.quotesmvvm.data.remote.UserApi 
        return (T) NetworkModule_ProvideUserApiFactory.provideUserApi(singletonC.provideRetrofitProvider.get());

        default: throw new AssertionError(id);
      }
    }
  }
}
