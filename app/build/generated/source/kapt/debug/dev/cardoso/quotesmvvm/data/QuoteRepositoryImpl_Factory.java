// Generated by Dagger (https://dagger.dev).
package dev.cardoso.quotesmvvm.data;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dev.cardoso.quotesmvvm.data.local.QuoteLocalDataSource;
import dev.cardoso.quotesmvvm.data.local.daos.QuoteDAO;
import dev.cardoso.quotesmvvm.data.remote.QuoteRemoteDataSource;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class QuoteRepositoryImpl_Factory implements Factory<QuoteRepositoryImpl> {
  private final Provider<QuoteDAO> quoteDAOProvider;

  private final Provider<QuoteLocalDataSource> localDataSourceProvider;

  private final Provider<QuoteRemoteDataSource> remoteDataSourceProvider;

  public QuoteRepositoryImpl_Factory(Provider<QuoteDAO> quoteDAOProvider,
      Provider<QuoteLocalDataSource> localDataSourceProvider,
      Provider<QuoteRemoteDataSource> remoteDataSourceProvider) {
    this.quoteDAOProvider = quoteDAOProvider;
    this.localDataSourceProvider = localDataSourceProvider;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public QuoteRepositoryImpl get() {
    return newInstance(quoteDAOProvider.get(), localDataSourceProvider.get(), remoteDataSourceProvider.get());
  }

  public static QuoteRepositoryImpl_Factory create(Provider<QuoteDAO> quoteDAOProvider,
      Provider<QuoteLocalDataSource> localDataSourceProvider,
      Provider<QuoteRemoteDataSource> remoteDataSourceProvider) {
    return new QuoteRepositoryImpl_Factory(quoteDAOProvider, localDataSourceProvider, remoteDataSourceProvider);
  }

  public static QuoteRepositoryImpl newInstance(QuoteDAO quoteDAO,
      QuoteLocalDataSource localDataSource, QuoteRemoteDataSource remoteDataSource) {
    return new QuoteRepositoryImpl(quoteDAO, localDataSource, remoteDataSource);
  }
}
